#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(local_size_x = 16, local_size_y  = 16) in;
layout (constant_id =  0) const uint ResolutionX = 1920;
layout (constant_id =  1) const uint ResolutionY = 1080;
// TileSize vector in sample code
layout (constant_id =  2) const uint TileCountX = (1920 - 1) / 64 + 1;
layout (constant_id =  3) const uint TileCountY = (1080 - 1) / 64 + 1;
layout (constant_id =  4) const uint TileWidth = 64;
layout (constant_id =  5) const uint TileHeight = 64;
layout (constant_id =  6) const uint TileCountZ = 256;

layout (set = 0, binding = 0) uniform _ubo {
    mat4 model;
    mat4 view;
    mat4 projectionClip;
    mat4 normal;
    vec4 viewPosition;
    vec2 depth;
    uint numLights;
} UBO;

layout (set = 1, binding = 0, r8ui) uniform uimageBuffer Flags;
layout (set = 1, binding = 2, r32ui) uniform uimageBuffer gridLightCounts;
layout (set = 1, binding = 3, r32ui) uniform uimageBuffer gridLightCountTotal;
layout (set = 1, binding = 4, r32ui) uniform uimageBuffer gridLightCountOffsets;

uint CoordToIdx(uint i, uint j, uint k) {
    return TileCountX * TileCountY * k + TileCountX * j + i;
}

void main() {
    if (gl_GlobalInvocationID.z < TileCountZ && gl_GlobalInvocationID.y < TileCountY && gl_GlobalInvocationID.x < TileCountX) {
        uint idx = CoordToIdx(gl_GlobalInvocationID.z, gl_GlobalInvocationID.y, gl_GlobalInvocationID.x); 
        // Get quantity of lights active in this tile
        uint count = imageLoad(gridLightCounts, int(idx)).r;
        if (count > 0) {
            // Returned value is total light count up to this point
            uint offset = imageAtomicAdd(gridLightCountTotal, 0, count);
            imageStore(gridLightCountOffsets, int(idx), uvec4(offset, 0, 0, 0));
        }
    }
}

