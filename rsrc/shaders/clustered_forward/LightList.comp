#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout(local_size_x = 32) in;
layout (constant_id =  0) const uint ResolutionX = 1920;
layout (constant_id =  1) const uint ResolutionY = 1080;
// TileSize vector in sample code
layout (constant_id =  2) const uint TileCountX = (1920 - 1) / 64 + 1;
layout (constant_id =  3) const uint TileCountY = (1080 - 1) / 64 + 1;
layout (constant_id =  4) const uint TileWidth = 64;
layout (constant_id =  5) const uint TileHeight = 64;
layout (constant_id =  6) const uint TileCountZ = 256;

layout (set = 0, binding = 0) uniform _ubo {
    mat4 model;
    mat4 view;
    mat4 projectionClip;
    mat4 normal;
    vec4 viewPosition;
    vec2 depth;
    uint numLights;
} UBO;

layout (set = 0, binding = 1, rgba32f) uniform imageBuffer positionRanges;

layout (set = 1, binding = 0, r8ui) uniform uimageBuffer Flags;
layout (set = 1, binding = 1, r32ui) uniform uimageBuffer lightBounds;
layout (set = 1, binding = 4, r32ui) uniform uimageBuffer gridLightCountOffsets;
layout (set = 1, binding = 5, r32ui) uniform uimageBuffer lightList;
layout (set = 1, binding = 6, r32ui) uniform uimageBuffer gridLightCountsCompare;

int CoordToIdx(uint i, uint j, uint k) {
    return int(TileCountX * TileCountY * int(k) + TileCountX * int(j) + int(i));
}

void main() {
    const uint light_idx = gl_GlobalInvocationID.x;

    if (light_idx < UBO.numLights) {
        vec4 posRangeIn = imageLoad(positionRanges, int(light_idx));
        if (posRangeIn.w == 0.0f) {
            return;
        }

        // Get i,j,k min/max of current light being processed, telling us what 
        // grids/bins it affects.
        uint i_min = imageLoad(lightBounds, int(light_idx*6 + 0)).r;
        uint j_min = imageLoad(lightBounds, int(light_idx*6 + 1)).r;
        uint k_min = imageLoad(lightBounds, int(light_idx*6 + 2)).r;
        uint i_max = imageLoad(lightBounds, int(light_idx*6 + 3)).r;
        uint j_max = imageLoad(lightBounds, int(light_idx*6 + 4)).r;
        uint k_max = imageLoad(lightBounds, int(light_idx*6 + 5)).r;

        for (uint i = i_min; i <= i_max; ++i) {
            for (uint j = j_min; j <= j_max; ++j) {
                for (uint k = k_min; k <= k_max; ++k) {
                    int grid_idx = CoordToIdx(i, j, k);
                    if (imageLoad(Flags, grid_idx).r != 1) {
                        continue;
                    }
                    uint offset = imageLoad(gridLightCountOffsets, grid_idx).r;
                    uint grid_light_idx = imageAtomicAdd(gridLightCountsCompare, grid_idx, 1);
                    imageStore(lightList, int(offset + grid_light_idx), uvec4(light_idx, 0, 0, 0));
                }
            }
        }
    }
}